import{_ as s,o as a,c as n,Q as o}from"./chunks/framework.aa94cc63.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"grammar/function.md","filePath":"grammar/function.md","lastUpdated":1721281424000}'),e={name:"grammar/function.md"},l=o(`<h2 id="函数" tabindex="-1">函数 <a class="header-anchor" href="#函数" aria-label="Permalink to &quot;函数&quot;">​</a></h2><p><code>Rust</code>中的函数与<code>Typescript</code>很相似，关键字从<code>function</code>改为<code>fn</code>, 使用<code>-&gt;</code>标记函数返回类型即可。</p><div class="language-rust vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(i</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">i32</span><span style="color:#E1E4E8;">, j</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">i32</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">i32</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   i </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> j</span></span>
<span class="line"><span style="color:#E1E4E8;"> }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">fn</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(i</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">i32</span><span style="color:#24292E;">, j</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">i32</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">i32</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> j</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="函数要点" tabindex="-1">函数要点 <a class="header-anchor" href="#函数要点" aria-label="Permalink to &quot;函数要点&quot;">​</a></h2><ol><li>函数名和变量名使用蛇形命名法(<code>snake case</code>)，例如<code>fn add_two() -&gt; {}</code></li><li>函数的位置可以随便放，<code>Rust</code>不关心我们在哪里定义了函数，只要有定义即可</li><li>每个函数参数都需要标注类型</li></ol><h2 id="links" tabindex="-1">Links <a class="header-anchor" href="#links" aria-label="Permalink to &quot;Links&quot;">​</a></h2><ol><li><a href="https://course.rs/basic/base-type/function.html" target="_blank" rel="noreferrer">函数</a></li></ol>`,7),p=[l];function t(c,r,i,d,E,y){return a(),n("div",null,p)}const _=s(e,[["render",t]]);export{h as __pageData,_ as default};
